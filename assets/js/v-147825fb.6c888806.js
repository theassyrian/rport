(self.webpackChunkrport_site=self.webpackChunkrport_site||[]).push([[814],{6872:(e,t,r)=>{"use strict";r.r(t),r.d(t,{data:()=>n});const n={key:"v-147825fb",path:"/docs/",title:"Quick Start",lang:"en-DE",frontmatter:{},excerpt:"",headers:[{level:2,title:"Build and installation",slug:"build-and-installation",children:[{level:3,title:"Binaries",slug:"binaries",children:[]},{level:3,title:"From source",slug:"from-source",children:[]}]},{level:2,title:"Usage",slug:"usage",children:[]},{level:2,title:"Run the server without installation",slug:"run-the-server-without-installation",children:[]},{level:2,title:"Install and run the rport server",slug:"install-and-run-the-rport-server",children:[{level:3,title:"A note on security",slug:"a-note-on-security",children:[]},{level:3,title:"Install the server",slug:"install-the-server",children:[]}]},{level:2,title:"Run the server with systemd",slug:"run-the-server-with-systemd",children:[]},{level:2,title:"Connect a client",slug:"connect-a-client",children:[]},{level:2,title:"Run a Linux client with systemd",slug:"run-a-linux-client-with-systemd",children:[]},{level:2,title:"Run a Windows client",slug:"run-a-windows-client",children:[]},{level:2,title:"Run clients on other operating systems",slug:"run-clients-on-other-operating-systems",children:[]},{level:2,title:"Configuration files",slug:"configuration-files",children:[]},{level:2,title:"Using authentication",slug:"using-authentication",children:[]},{level:2,title:"All API Capabilities",slug:"all-api-capabilities",children:[]},{level:2,title:"Install a web-based frontend",slug:"install-a-web-based-frontend",children:[]},{level:2,title:"Install the command-line interface",slug:"install-the-command-line-interface",children:[]}],filePathRelative:"docs/README.md"}},4497:(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>tt});var n=r(6252);const a=(0,n.uE)('<h1 id="quick-start" tabindex="-1"><a class="header-anchor" href="#quick-start" aria-hidden="true">#</a> Quick Start</h1><h2 id="build-and-installation" tabindex="-1"><a class="header-anchor" href="#build-and-installation" aria-hidden="true">#</a> Build and installation</h2><h3 id="binaries" tabindex="-1"><a class="header-anchor" href="#binaries" aria-hidden="true">#</a> Binaries</h3>',3),o=(0,n.Uk)("We provide pre-compiled binaries. You can download them "),s={href:"https://github.com/cloudradar-monitoring/rport/releases",target:"_blank",rel:"noopener noreferrer"},l=(0,n.Uk)("here"),i=(0,n.Uk)("."),d=(0,n.uE)('<h3 id="from-source" tabindex="-1"><a class="header-anchor" href="#from-source" aria-hidden="true">#</a> From source</h3><ol><li><p>Build from source (Linux or Mac OS/X):</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">make</span> all\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><code>rport</code> and <code>rportd</code> binaries will appear in directory.</p></li><li><p>Build using Docker:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">make</span> docker-goreleaser\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>will create binaries for all supported platforms in <code>./dist</code> directory.</p></li></ol><h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><p><code>rportd</code> should be executed on the machine, acting as a server.</p><p><code>rport</code> is a client app which will try to establish long-running connection to the server.</p><p>Minimal setup:</p><ol><li>Execute <code>./rportd --addr 0.0.0.0:9999 --auth rport:password123 --data-dir /var/tmp</code> on a server.</li><li>Execute <code>./rport --auth rport:password123 &lt;SERVER_IP&gt;:9999 2222:22</code> on a client or <code>./rport --auth rport:password123 &lt;SERVER_IP&gt;:9999 22</code> and the server tunnel port will be randomly chosen for you.</li><li>Now end-users can connect to <code>&lt;SERVER_IP&gt;:2222</code> (e.g. using a SSH Connection). The connection will be proxied to client machine.</li></ol><p>See <code>./rportd --help</code> and <code>./rport --help</code> for more options, like:</p><ul><li>Specifying certificate fingerprint to validate server authority</li><li>Client session authentication using user:password pair</li><li>Restricting, which users can connect</li><li>Specifying additional intermediate HTTP proxy</li><li>Using POSIX signals to control running apps</li><li>Setting custom HTTP headers</li><li>Using IPv6 addresses when starting a server</li></ul><h2 id="run-the-server-without-installation" tabindex="-1"><a class="header-anchor" href="#run-the-server-without-installation" aria-hidden="true">#</a> Run the server without installation</h2><p>If you quickly want to run the rport server without installation, run the following commands from any unprivileged user account.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>curl -LOJ https://downloads.rport.io/rport/stable/latest.php?arch=Linux_x86_64\ntar vxzf rport_*_Linux_x86_64.tar.gz rportd\nKEY=$(openssl rand -hex 18)\n./rportd --log-level info --data-dir /var/tmp/ --key $KEY --auth user1:1234\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Rportd will be listening on the default port 8080 for client connections. Grab the generated fingerprint from <code>/var/tmp/rportd-fingerprint.txt</code> and use it for secure client connections.</p><h2 id="install-and-run-the-rport-server" tabindex="-1"><a class="header-anchor" href="#install-and-run-the-rport-server" aria-hidden="true">#</a> Install and run the rport server</h2><p>On a machine connected to the public internet and ideally with an FQDN registered to a public DNS install and run the server. Assume, the server is called <code>node1.example.com</code>.</p><h3 id="a-note-on-security" tabindex="-1"><a class="header-anchor" href="#a-note-on-security" aria-hidden="true">#</a> A note on security</h3>',16),c={class:"custom-container danger"},p=(0,n.Wm)("p",{class:"custom-container-title"},"DANGER",-1),u=(0,n.Wm)("p",null,[(0,n.Wm)("strong",null,"Do not run the server as root!"),(0,n.Uk)(" This is an unnecessary risk. Rportd should always use an unprivileged user.")],-1),h=(0,n.Wm)("p",null,[(0,n.Uk)("While using rport without a "),(0,n.Wm)("strong",null,"fingerprint"),(0,n.Uk)(" is possible, it's highly recommended to not skip this part. The fingerprint ensures you connect only to trusted servers. If you omit this step a man in the middle can bring up a rport server and hijack your tunnels. If you do ssh or rdp through the tunnel, a hijacked tunnel will not expose your credentials because the data inside the tunnel is still encrypted. But if you use rport for unencrypted protocols like HTTP, sniffing credentials would be possible.")],-1),m=(0,n.Uk)("You might wonder why the rport server does not provide encryption on the transport layer (TLS, SSL, HTTPS). "),g=(0,n.Wm)("strong",null,"Encryption is always enabled.",-1),b=(0,n.Uk)(" Your connections are encrypted and secured by SSH over HTTP. When you start up the rport server, it will generate an in-memory ECDSA public/private key pair. Adding TLS by putting a SSL "),f=(0,n.Uk)("reverse proxy"),v=(0,n.Uk)(" is possible so you get SSH over HTTPS."),x=(0,n.uE)('<h3 id="install-the-server" tabindex="-1"><a class="header-anchor" href="#install-the-server" aria-hidden="true">#</a> Install the server</h3><p>For a proper installation execute the following steps.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>curl -LOJ https://downloads.rport.io/rportd/stable/latest.php?arch=Linux_x86_64\nsudo tar vxzf rportd_*_Linux_x86_64.tar.gz -C /usr/local/bin/ rportd\nsudo useradd -d /var/lib/rport -m -U -r -s /bin/false rport\nsudo mkdir /etc/rport/\nsudo mkdir /var/log/rport/\nsudo chown rport /var/log/rport/\nsudo tar vxzf rportd_*_Linux_x86_64.tar.gz -C /etc/rport/ rportd.example.conf\nsudo cp /etc/rport/rportd.example.conf /etc/rport/rportd.conf\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>Create a new unique key for the server instance. Store this key and don&#39;t change it. You will use it later. Otherwise, your fingerprint will change and your clients might be rejected. Open the <code>/etc/rport/rportd.conf</code> with an editor. Add a random string as <code>key_seed</code>. You can use <code>openssl rand -hex 18</code> to generate one. Or just execute the following commands to generate and enter a new key to your configuration file.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>KEY_SEED=$(openssl rand -hex 18)\nsed -i &quot;s/key_seed = .*/key_seed =\\&quot;${KEY_SEED}\\&quot;/g&quot; /etc/rport/rportd.conf\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>All other default settings are suitable for a quick and secure start.</p><p>Change to the rport user account and check your rportd starts without errors.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>ubuntu@node1:~$ sudo -u rport -s /bin/bash\nrport@node1:/home/ubuntu$ rportd -c /etc/rport/rportd.conf --log-level info &amp;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>For the first testing leave the console open and observe the log with <code>tail -f /var/log/rport/rportd.log</code>. Copy the generated fingerprint from <code>/var/lib/rport/rportd-fingerprint.txt</code> to your clipboard. Try your first client connection now.</p><h2 id="run-the-server-with-systemd" tabindex="-1"><a class="header-anchor" href="#run-the-server-with-systemd" aria-hidden="true">#</a> Run the server with systemd</h2><p>If all works fine stop the rport server and integrate it into systemd.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>sudo rportd --service install --service-user rport --config /etc/rport/rportd.conf\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>A file <code>/etc/systemd/system/rportd.service</code> will be created and systemd is ready to manage rportd.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>sudo systemctl start rportd\nsudo systemctl enable rportd # Optionally start rportd on boot\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="connect-a-client" tabindex="-1"><a class="header-anchor" href="#connect-a-client" aria-hidden="true">#</a> Connect a client</h2><p>Assume, the client is called <code>client1.local.localdomain</code>. On your client just install the client binary</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>curl -LOJ https://downloads.rport.io/rport/stable/latest.php?arch=Linux_x86_64\nsudo tar vxzf rport_*_Linux_x86_64.tar.gz -C /usr/local/bin/ rport\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Create an ad hoc tunnel that will forward the port 2222 of <code>node1.example.com</code> to the to local port 22 of <code>client1.local.localdomain</code>.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>rport --auth user1:1234 --fingerprint &lt;YOUR_FINGERPRINT&gt; --data-dir=/tmp node1.example.com:8080 2222:0.0.0.0:22\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Observing the log of the server you get a confirmation about the newly created tunnel.</p><p>Now you can access your machine behind a firewall through the tunnel. Try <code>ssh -p 2222 node1.example.com</code> and you will come out on the machine where the tunnel has been initiated.</p><h2 id="run-a-linux-client-with-systemd" tabindex="-1"><a class="header-anchor" href="#run-a-linux-client-with-systemd" aria-hidden="true">#</a> Run a Linux client with systemd</h2><p>For a proper and permanent installation of the client execute the following steps.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>curl -LOJ https://downloads.rport.io/rport/stable/latest.php?arch=Linux_x86_64\nsudo tar vxzf rport_*_Linux_x86_64.tar.gz -C /usr/local/bin/ rport\nsudo useradd -d /var/lib/rport -U -m -r -s /bin/false rport\nsudo mkdir /etc/rport/\nsudo mkdir /var/log/rport/\nsudo chown rport /var/log/rport/\nsudo tar vxzf rport_*_Linux_x86_64.tar.gz -C /etc/rport/ rport.example.conf\nsudo cp /etc/rport/rport.example.conf /etc/rport/rport.conf\nsudo rport --service install --service-user rport --config /etc/rport/rport.conf\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>Open the config file <code>/etc/rport/rport.conf</code> and adjust it to your needs. (See below.) Finally, start the rport client and optionally register it in the auto-start.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>systemctl start rport\nsystemctl enable rport\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>A very minimalistic client configuration <code>rport.conf</code> can look like this:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>[client]\nserver = &quot;node1.example.com:8080&quot;\nfingerprint = &quot;&lt;YOUR_FINGERPRINT&gt;&quot;\nauth = &quot;user1:1234&quot;\nremotes = [&#39;2222:22&#39;]\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>This will establish a permanent tunnel and the local port 22 (SSH) of the client becomes available on port 2222 of the rport server.</p><h2 id="run-a-windows-client" tabindex="-1"><a class="header-anchor" href="#run-a-windows-client" aria-hidden="true">#</a> Run a Windows client</h2>',30),w=(0,n.Uk)("On Microsoft Windows "),k={href:"https://downloads.rport.io/rport/stable/latest.php?arch=Windows_x86_64",target:"_blank",rel:"noopener noreferrer"},y=(0,n.Uk)("download the latest client binary"),W=(0,n.Uk)(" and extract it ideally to "),U=(0,n.Wm)("code",null,"C:\\Program Files\\rport",-1),_=(0,n.Uk)(". Rename the "),I=(0,n.Wm)("code",null,"rport.example.conf",-1),S=(0,n.Uk)(" to "),P=(0,n.Wm)("code",null,"rport.conf",-1),R=(0,n.Uk)(" and store it in "),A=(0,n.Wm)("code",null,"C:\\Program Files\\rport",-1),T=(0,n.Uk)(" too. Open the "),C=(0,n.Wm)("code",null,"rport.conf",-1),E=(0,n.Uk)(" file with a text editor. On older Windows use an editor that supports unix line breaks, like "),q={href:"https://notepad-plus-plus.org/",target:"_blank",rel:"noopener noreferrer"},L=(0,n.Uk)("notepad++"),O=(0,n.Uk)("."),F=(0,n.uE)('<p>A very minimalistic client configuration <code>rport.conf</code> can look like this:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>[client]\nserver = &quot;node1.example.com:8080&quot;\nfingerprint = &quot;&lt;YOUR_FINGERPRINT&gt;&quot;\nauth = &quot;user1:1234&quot;\nremotes = [&#39;3300:3389&#39;]\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>This will establish a permanent tunnel and the local port 3389 (remote desktop) of the client becomes available on port 3300 of the rport server.</p><p>Before registering rport as a windows service, check your connection manually.</p><p>Open a command prompt with administrative rights and type in:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>cd &quot;C:\\Program Files\\rport&quot;\nrport.exe -c rport.conf\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>If you don&#39;t get errors on the console, try a remote desktop connection to the rport server on port 3300. Stop the client with CTRL-C and register it as a service and start it.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>rport.exe --service install -c rport.conf\nsc query rport\nsc start rport\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>The windows service will be created with &quot;Startup type = automatic&quot;. If you don&#39;t want the rport client to start on boot, you must manually disable it using for example <code>sc config rport start=disabled</code>.</p><h2 id="run-clients-on-other-operating-systems" tabindex="-1"><a class="header-anchor" href="#run-clients-on-other-operating-systems" aria-hidden="true">#</a> Run clients on other operating systems</h2>',10),N=(0,n.Uk)("Please refer to "),Y=(0,n.Uk)("clients on other operating systems"),z=(0,n.Uk)("."),H=(0,n.Wm)("h2",{id:"configuration-files",tabindex:"-1"},[(0,n.Wm)("a",{class:"header-anchor",href:"#configuration-files","aria-hidden":"true"},"#"),(0,n.Uk)(" Configuration files")],-1),D=(0,n.Uk)("Config files can be used to set up both the rport server and clients. In order to use it an arg "),B=(0,n.Wm)("code",null,"--config",-1),M=(0,n.Uk)("(or "),j=(0,n.Wm)("code",null,"-c",-1),G=(0,n.Uk)(") should be passed to a command with a path to the file. Configuration examples "),$=(0,n.Wm)("code",null,"rportd.example.conf",-1),V=(0,n.Uk)(" ("),J={href:"https://github.com/cloudradar-monitoring/rport/blob/master/rportd.example.conf",target:"_blank",rel:"noopener noreferrer"},K=(0,n.Uk)("view online"),Q=(0,n.Uk)(") and "),X=(0,n.Wm)("code",null,"rport.example.conf",-1),Z=(0,n.Uk)(" ("),ee={href:"https://github.com/cloudradar-monitoring/rport/blob/master/rport.example.conf",target:"_blank",rel:"noopener noreferrer"},te=(0,n.Uk)("view online"),re=(0,n.Uk)(") can be found in the release archive or in the source."),ne=(0,n.uE)('<p>NOTE: command arguments and env variables will override values from the config file.</p><p>In order to load the configuration from a file run:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>rportd -c /etc/rport/rportd.conf\nrport -c /etc/rport/rport.conf\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="using-authentication" tabindex="-1"><a class="header-anchor" href="#using-authentication" aria-hidden="true">#</a> Using authentication</h2><p>To prevent anyone who knows the address and the port of your rport server to use it for tunneling, using client authentication is required.</p>',5),ae=(0,n.Uk)("Using a static username password pair is the most basic option. See the comments in the "),oe={href:"https://github.com/cloudradar-monitoring/rport/blob/master/rportd.example.conf",target:"_blank",rel:"noopener noreferrer"},se=(0,n.Uk)("rportd.example.conf"),le=(0,n.Uk)(" and read more about all supported "),ie=(0,n.Uk)("authentication options"),de=(0,n.Uk)("."),ce=(0,n.uE)('<p>On the client start the tunnel this way</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>rport --auth user1:1234 --fingerprint &lt;YOUR_FINGERPRINT&gt; node1.example.com:8080 2222:0.0.0.0:22\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><em>Note that in this early version the order of the command line options is still important. This might change later.</em></p><h2 id="all-api-capabilities" tabindex="-1"><a class="header-anchor" href="#all-api-capabilities" aria-hidden="true">#</a> All API Capabilities</h2>',4),pe={href:"https://petstore.swagger.io/?url=https://raw.githubusercontent.com/cloudradar-monitoring/rport/master/api-doc.yml",target:"_blank",rel:"noopener noreferrer"},ue=(0,n.Uk)("Swagger API docs"),he=(0,n.Uk)("."),me=(0,n.Uk)("API authentication options"),ge=(0,n.Uk)("Management of clients and tunnels via the API"),be=(0,n.Uk)(" or the "),fe={href:"https://petstore.swagger.io/?url=https://raw.githubusercontent.com/cloudradar-monitoring/rport/master/api-doc.yml#/Client%20Sessions%20and%20Tunnels",target:"_blank",rel:"noopener noreferrer"},ve=(0,n.Uk)("Swagger API docs"),xe=(0,n.Uk)("Command execution via the API"),we=(0,n.Uk)(" or the "),ke={href:"https://petstore.swagger.io/?url=https://raw.githubusercontent.com/cloudradar-monitoring/rport/master/api-doc.yml#/Commands",target:"_blank",rel:"noopener noreferrer"},ye=(0,n.Uk)("Swagger API docs"),We=(0,n.Uk)("Management of client authentication credentials via the API"),Ue=(0,n.Uk)(" or the "),_e={href:"https://petstore.swagger.io/?url=https://raw.githubusercontent.com/cloudradar-monitoring/rport/master/api-doc.yml#/Rport%20Client%20Auth%20Credentials",target:"_blank",rel:"noopener noreferrer"},Ie=(0,n.Uk)("Swagger API docs"),Se=(0,n.Uk)("Management of client groups via the API"),Pe=(0,n.Uk)(" or the "),Re={href:"https://petstore.swagger.io/?url=https://raw.githubusercontent.com/cloudradar-monitoring/rport/master/api-doc.yml#/Client%20Groups",target:"_blank",rel:"noopener noreferrer"},Ae=(0,n.Uk)("Swagger API docs"),Te=(0,n.Uk)("Management of users via the API"),Ce=(0,n.Uk)(" or the "),Ee={href:"https://petstore.swagger.io/?url=https://raw.githubusercontent.com/cloudradar-monitoring/rport/master/api-doc.yml#/Users",target:"_blank",rel:"noopener noreferrer"},qe=(0,n.Uk)("Swagger API docs"),Le=(0,n.Uk)("Vault management via the API"),Oe=(0,n.Uk)(" or the "),Fe={href:"https://petstore.swagger.io/?url=https://raw.githubusercontent.com/cloudradar-monitoring/rport/master/api-doc.yml#/Vault",target:"_blank",rel:"noopener noreferrer"},Ne=(0,n.Uk)("Swagger API docs"),Ye=(0,n.Uk)("Scripts management via the API"),ze=(0,n.Uk)(" or the "),He={href:"https://petstore.swagger.io/?url=https://raw.githubusercontent.com/cloudradar-monitoring/rport/master/api-doc.yml#/Scripts",target:"_blank",rel:"noopener noreferrer"},De=(0,n.Uk)("Swagger API docs"),Be=(0,n.Uk)("File uplaods"),Me=(0,n.Uk)(" or the "),je={href:"https://petstore.swagger.io/?url=https://raw.githubusercontent.com/cloudradar-monitoring/rport/master/api-doc.yml#/Upload",target:"_blank",rel:"noopener noreferrer"},Ge=(0,n.Uk)("Swagger API docs"),$e=(0,n.Wm)("h2",{id:"install-a-web-based-frontend",tabindex:"-1"},[(0,n.Wm)("a",{class:"header-anchor",href:"#install-a-web-based-frontend","aria-hidden":"true"},"#"),(0,n.Uk)(" Install a web-based frontend")],-1),Ve=(0,n.Uk)("Rport comes with a user-friendly web-based frontend. The frontend has it's own none-open-source repository. The installation is quick and easy. "),Je=(0,n.Uk)("Learn more"),Ke=(0,n.Wm)("h2",{id:"install-the-command-line-interface",tabindex:"-1"},[(0,n.Wm)("a",{class:"header-anchor",href:"#install-the-command-line-interface","aria-hidden":"true"},"#"),(0,n.Uk)(" Install the command-line interface")],-1),Qe=(0,n.Uk)("You can also manage clients, tunnels, and command from a user-friendly command-line utility. It's available as a stand-alone static binary for Windows and Linux. See "),Xe={href:"https://github.com/cloudradar-monitoring/rportcli",target:"_blank",rel:"noopener noreferrer"},Ze=(0,n.Uk)("https://github.com/cloudradar-monitoring/rportcli"),et=(0,n.Uk)(". The command-line utility does not cover all API capabilities yet. But it's already a very useful tool making rport even more powerful."),tt={render:function(e,t){const r=(0,n.up)("OutboundLink"),tt=(0,n.up)("RouterLink");return(0,n.wg)(),(0,n.j4)(n.HY,null,[a,(0,n.Wm)("p",null,[o,(0,n.Wm)("a",s,[l,(0,n.Wm)(r)]),i]),d,(0,n.Wm)("div",c,[p,u,h,(0,n.Wm)("p",null,[m,g,b,(0,n.Wm)(tt,{to:"/docs/docs/reverse-proxy.html"},{default:(0,n.w5)((()=>[f])),_:1}),v])]),x,(0,n.Wm)("p",null,[w,(0,n.Wm)("a",k,[y,(0,n.Wm)(r)]),W,U,_,I,S,P,R,A,T,C,E,(0,n.Wm)("a",q,[L,(0,n.Wm)(r)]),O]),F,(0,n.Wm)("p",null,[N,(0,n.Wm)(tt,{to:"/docs/no05-client-on-other-os.html"},{default:(0,n.w5)((()=>[Y])),_:1}),z]),H,(0,n.Wm)("p",null,[D,B,M,j,G,$,V,(0,n.Wm)("a",J,[K,(0,n.Wm)(r)]),Q,X,Z,(0,n.Wm)("a",ee,[te,(0,n.Wm)(r)]),re]),ne,(0,n.Wm)("p",null,[ae,(0,n.Wm)("a",oe,[se,(0,n.Wm)(r)]),le,(0,n.Wm)(tt,{to:"/docs/no03-client-auth.html"},{default:(0,n.w5)((()=>[ie])),_:1}),de]),ce,(0,n.Wm)("ul",null,[(0,n.Wm)("li",null,[(0,n.Wm)("a",pe,[ue,(0,n.Wm)(r)]),he]),(0,n.Wm)("li",null,[(0,n.Wm)(tt,{to:"/docs/no02-api-auth.html"},{default:(0,n.w5)((()=>[me])),_:1})]),(0,n.Wm)("li",null,[(0,n.Wm)(tt,{to:"/docs/no09-managing-tunnels.html"},{default:(0,n.w5)((()=>[ge])),_:1}),be,(0,n.Wm)("a",fe,[ve,(0,n.Wm)(r)])]),(0,n.Wm)("li",null,[(0,n.Wm)(tt,{to:"/docs/no06-command-execution.html"},{default:(0,n.w5)((()=>[xe])),_:1}),we,(0,n.Wm)("a",ke,[ye,(0,n.Wm)(r)])]),(0,n.Wm)("li",null,[(0,n.Wm)(tt,{to:"/docs/no03-client-auth.html"},{default:(0,n.w5)((()=>[We])),_:1}),Ue,(0,n.Wm)("a",_e,[Ie,(0,n.Wm)(r)])]),(0,n.Wm)("li",null,[(0,n.Wm)(tt,{to:"/docs/no04-client-groups.html"},{default:(0,n.w5)((()=>[Se])),_:1}),Pe,(0,n.Wm)("a",Re,[Ae,(0,n.Wm)(r)])]),(0,n.Wm)("li",null,[(0,n.Wm)(tt,{to:"/docs/no12-user.html"},{default:(0,n.w5)((()=>[Te])),_:1}),Ce,(0,n.Wm)("a",Ee,[qe,(0,n.Wm)(r)])]),(0,n.Wm)("li",null,[(0,n.Wm)(tt,{to:"/docs/no13-vault.html"},{default:(0,n.w5)((()=>[Le])),_:1}),Oe,(0,n.Wm)("a",Fe,[Ne,(0,n.Wm)(r)])]),(0,n.Wm)("li",null,[(0,n.Wm)(tt,{to:"/docs/no14-scripts.html"},{default:(0,n.w5)((()=>[Ye])),_:1}),ze,(0,n.Wm)("a",He,[De,(0,n.Wm)(r)])]),(0,n.Wm)("li",null,[(0,n.Wm)(tt,{to:"/docs/no18-file-upload.html"},{default:(0,n.w5)((()=>[Be])),_:1}),Me,(0,n.Wm)("a",je,[Ge,(0,n.Wm)(r)])])]),$e,(0,n.Wm)("p",null,[Ve,(0,n.Wm)(tt,{to:"/docs/no07-frontend.html"},{default:(0,n.w5)((()=>[Je])),_:1})]),Ke,(0,n.Wm)("p",null,[Qe,(0,n.Wm)("a",Xe,[Ze,(0,n.Wm)(r)]),et])],64)}}}}]);